// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gpu.proto

#include "gpu.pb.h"
#include "gpu.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace remoteGPU {

static const char* RemoteGPU_method_names[] = {
  "/remoteGPU.RemoteGPU/UploadFile",
  "/remoteGPU.RemoteGPU/DownloadFile",
  "/remoteGPU.RemoteGPU/Execute",
};

std::unique_ptr< RemoteGPU::Stub> RemoteGPU::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RemoteGPU::Stub> stub(new RemoteGPU::Stub(channel, options));
  return stub;
}

RemoteGPU::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UploadFile_(RemoteGPU_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownloadFile_(RemoteGPU_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Execute_(RemoteGPU_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status RemoteGPU::Stub::UploadFile(::grpc::ClientContext* context, const ::remoteGPU::File& request, ::remoteGPU::FileID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::remoteGPU::File, ::remoteGPU::FileID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadFile_, context, request, response);
}

void RemoteGPU::Stub::async::UploadFile(::grpc::ClientContext* context, const ::remoteGPU::File* request, ::remoteGPU::FileID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::remoteGPU::File, ::remoteGPU::FileID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadFile_, context, request, response, std::move(f));
}

void RemoteGPU::Stub::async::UploadFile(::grpc::ClientContext* context, const ::remoteGPU::File* request, ::remoteGPU::FileID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::remoteGPU::FileID>* RemoteGPU::Stub::PrepareAsyncUploadFileRaw(::grpc::ClientContext* context, const ::remoteGPU::File& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::remoteGPU::FileID, ::remoteGPU::File, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::remoteGPU::FileID>* RemoteGPU::Stub::AsyncUploadFileRaw(::grpc::ClientContext* context, const ::remoteGPU::File& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RemoteGPU::Stub::DownloadFile(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::remoteGPU::File* response) {
  return ::grpc::internal::BlockingUnaryCall< ::remoteGPU::FileID, ::remoteGPU::File, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DownloadFile_, context, request, response);
}

void RemoteGPU::Stub::async::DownloadFile(::grpc::ClientContext* context, const ::remoteGPU::FileID* request, ::remoteGPU::File* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::remoteGPU::FileID, ::remoteGPU::File, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadFile_, context, request, response, std::move(f));
}

void RemoteGPU::Stub::async::DownloadFile(::grpc::ClientContext* context, const ::remoteGPU::FileID* request, ::remoteGPU::File* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::remoteGPU::File>* RemoteGPU::Stub::PrepareAsyncDownloadFileRaw(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::remoteGPU::File, ::remoteGPU::FileID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DownloadFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::remoteGPU::File>* RemoteGPU::Stub::AsyncDownloadFileRaw(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownloadFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::remoteGPU::Output>* RemoteGPU::Stub::ExecuteRaw(::grpc::ClientContext* context, const ::remoteGPU::FileID& request) {
  return ::grpc::internal::ClientReaderFactory< ::remoteGPU::Output>::Create(channel_.get(), rpcmethod_Execute_, context, request);
}

void RemoteGPU::Stub::async::Execute(::grpc::ClientContext* context, const ::remoteGPU::FileID* request, ::grpc::ClientReadReactor< ::remoteGPU::Output>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::remoteGPU::Output>::Create(stub_->channel_.get(), stub_->rpcmethod_Execute_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::remoteGPU::Output>* RemoteGPU::Stub::AsyncExecuteRaw(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::remoteGPU::Output>::Create(channel_.get(), cq, rpcmethod_Execute_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::remoteGPU::Output>* RemoteGPU::Stub::PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::remoteGPU::Output>::Create(channel_.get(), cq, rpcmethod_Execute_, context, request, false, nullptr);
}

RemoteGPU::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteGPU_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteGPU::Service, ::remoteGPU::File, ::remoteGPU::FileID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteGPU::Service* service,
             ::grpc::ServerContext* ctx,
             const ::remoteGPU::File* req,
             ::remoteGPU::FileID* resp) {
               return service->UploadFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteGPU_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteGPU::Service, ::remoteGPU::FileID, ::remoteGPU::File, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteGPU::Service* service,
             ::grpc::ServerContext* ctx,
             const ::remoteGPU::FileID* req,
             ::remoteGPU::File* resp) {
               return service->DownloadFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteGPU_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RemoteGPU::Service, ::remoteGPU::FileID, ::remoteGPU::Output>(
          [](RemoteGPU::Service* service,
             ::grpc::ServerContext* ctx,
             const ::remoteGPU::FileID* req,
             ::grpc::ServerWriter<::remoteGPU::Output>* writer) {
               return service->Execute(ctx, req, writer);
             }, this)));
}

RemoteGPU::Service::~Service() {
}

::grpc::Status RemoteGPU::Service::UploadFile(::grpc::ServerContext* context, const ::remoteGPU::File* request, ::remoteGPU::FileID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteGPU::Service::DownloadFile(::grpc::ServerContext* context, const ::remoteGPU::FileID* request, ::remoteGPU::File* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteGPU::Service::Execute(::grpc::ServerContext* context, const ::remoteGPU::FileID* request, ::grpc::ServerWriter< ::remoteGPU::Output>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace remoteGPU

