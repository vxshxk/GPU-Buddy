// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proxy.proto

#include "proxy.pb.h"
#include "proxy.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace proxy {

static const char* ProxyService_method_names[] = {
  "/proxy.ProxyService/RegisterServer",
  "/proxy.ProxyService/GetAvailableServers",
};

std::unique_ptr< ProxyService::Stub> ProxyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProxyService::Stub> stub(new ProxyService::Stub(channel, options));
  return stub;
}

ProxyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterServer_(ProxyService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAvailableServers_(ProxyService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProxyService::Stub::RegisterServer(::grpc::ClientContext* context, const ::proxy::ServerInfo& request, ::proxy::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proxy::ServerInfo, ::proxy::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterServer_, context, request, response);
}

void ProxyService::Stub::async::RegisterServer(::grpc::ClientContext* context, const ::proxy::ServerInfo* request, ::proxy::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proxy::ServerInfo, ::proxy::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterServer_, context, request, response, std::move(f));
}

void ProxyService::Stub::async::RegisterServer(::grpc::ClientContext* context, const ::proxy::ServerInfo* request, ::proxy::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proxy::RegisterResponse>* ProxyService::Stub::PrepareAsyncRegisterServerRaw(::grpc::ClientContext* context, const ::proxy::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proxy::RegisterResponse, ::proxy::ServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proxy::RegisterResponse>* ProxyService::Stub::AsyncRegisterServerRaw(::grpc::ClientContext* context, const ::proxy::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProxyService::Stub::GetAvailableServers(::grpc::ClientContext* context, const ::proxy::Empty& request, ::proxy::ServerList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proxy::Empty, ::proxy::ServerList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAvailableServers_, context, request, response);
}

void ProxyService::Stub::async::GetAvailableServers(::grpc::ClientContext* context, const ::proxy::Empty* request, ::proxy::ServerList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proxy::Empty, ::proxy::ServerList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAvailableServers_, context, request, response, std::move(f));
}

void ProxyService::Stub::async::GetAvailableServers(::grpc::ClientContext* context, const ::proxy::Empty* request, ::proxy::ServerList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAvailableServers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proxy::ServerList>* ProxyService::Stub::PrepareAsyncGetAvailableServersRaw(::grpc::ClientContext* context, const ::proxy::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proxy::ServerList, ::proxy::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAvailableServers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proxy::ServerList>* ProxyService::Stub::AsyncGetAvailableServersRaw(::grpc::ClientContext* context, const ::proxy::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAvailableServersRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProxyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProxyService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProxyService::Service, ::proxy::ServerInfo, ::proxy::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProxyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proxy::ServerInfo* req,
             ::proxy::RegisterResponse* resp) {
               return service->RegisterServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProxyService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProxyService::Service, ::proxy::Empty, ::proxy::ServerList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProxyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proxy::Empty* req,
             ::proxy::ServerList* resp) {
               return service->GetAvailableServers(ctx, req, resp);
             }, this)));
}

ProxyService::Service::~Service() {
}

::grpc::Status ProxyService::Service::RegisterServer(::grpc::ServerContext* context, const ::proxy::ServerInfo* request, ::proxy::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProxyService::Service::GetAvailableServers(::grpc::ServerContext* context, const ::proxy::Empty* request, ::proxy::ServerList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proxy

