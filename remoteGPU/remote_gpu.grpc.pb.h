// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: remote_gpu.proto
#ifndef GRPC_remote_5fgpu_2eproto__INCLUDED
#define GRPC_remote_5fgpu_2eproto__INCLUDED

#include "remote_gpu.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace remoteGPU {

class RemoteGPU final {
 public:
  static constexpr char const* service_full_name() {
    return "remoteGPU.RemoteGPU";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status UploadFile(::grpc::ClientContext* context, const ::remoteGPU::File& request, ::remoteGPU::FileID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::FileID>> AsyncUploadFile(::grpc::ClientContext* context, const ::remoteGPU::File& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::FileID>>(AsyncUploadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::FileID>> PrepareAsyncUploadFile(::grpc::ClientContext* context, const ::remoteGPU::File& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::FileID>>(PrepareAsyncUploadFileRaw(context, request, cq));
    }
    virtual ::grpc::Status DownloadFile(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::remoteGPU::File* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::File>> AsyncDownloadFile(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::File>>(AsyncDownloadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::File>> PrepareAsyncDownloadFile(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::File>>(PrepareAsyncDownloadFileRaw(context, request, cq));
    }
    virtual ::grpc::Status Execute(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::remoteGPU::Output* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::Output>> AsyncExecute(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::Output>>(AsyncExecuteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::Output>> PrepareAsyncExecute(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::Output>>(PrepareAsyncExecuteRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void UploadFile(::grpc::ClientContext* context, const ::remoteGPU::File* request, ::remoteGPU::FileID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UploadFile(::grpc::ClientContext* context, const ::remoteGPU::File* request, ::remoteGPU::FileID* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DownloadFile(::grpc::ClientContext* context, const ::remoteGPU::FileID* request, ::remoteGPU::File* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DownloadFile(::grpc::ClientContext* context, const ::remoteGPU::FileID* request, ::remoteGPU::File* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Execute(::grpc::ClientContext* context, const ::remoteGPU::FileID* request, ::remoteGPU::Output* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Execute(::grpc::ClientContext* context, const ::remoteGPU::FileID* request, ::remoteGPU::Output* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::FileID>* AsyncUploadFileRaw(::grpc::ClientContext* context, const ::remoteGPU::File& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::FileID>* PrepareAsyncUploadFileRaw(::grpc::ClientContext* context, const ::remoteGPU::File& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::File>* AsyncDownloadFileRaw(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::File>* PrepareAsyncDownloadFileRaw(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::Output>* AsyncExecuteRaw(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::remoteGPU::Output>* PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status UploadFile(::grpc::ClientContext* context, const ::remoteGPU::File& request, ::remoteGPU::FileID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::remoteGPU::FileID>> AsyncUploadFile(::grpc::ClientContext* context, const ::remoteGPU::File& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::remoteGPU::FileID>>(AsyncUploadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::remoteGPU::FileID>> PrepareAsyncUploadFile(::grpc::ClientContext* context, const ::remoteGPU::File& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::remoteGPU::FileID>>(PrepareAsyncUploadFileRaw(context, request, cq));
    }
    ::grpc::Status DownloadFile(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::remoteGPU::File* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::remoteGPU::File>> AsyncDownloadFile(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::remoteGPU::File>>(AsyncDownloadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::remoteGPU::File>> PrepareAsyncDownloadFile(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::remoteGPU::File>>(PrepareAsyncDownloadFileRaw(context, request, cq));
    }
    ::grpc::Status Execute(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::remoteGPU::Output* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::remoteGPU::Output>> AsyncExecute(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::remoteGPU::Output>>(AsyncExecuteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::remoteGPU::Output>> PrepareAsyncExecute(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::remoteGPU::Output>>(PrepareAsyncExecuteRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void UploadFile(::grpc::ClientContext* context, const ::remoteGPU::File* request, ::remoteGPU::FileID* response, std::function<void(::grpc::Status)>) override;
      void UploadFile(::grpc::ClientContext* context, const ::remoteGPU::File* request, ::remoteGPU::FileID* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DownloadFile(::grpc::ClientContext* context, const ::remoteGPU::FileID* request, ::remoteGPU::File* response, std::function<void(::grpc::Status)>) override;
      void DownloadFile(::grpc::ClientContext* context, const ::remoteGPU::FileID* request, ::remoteGPU::File* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Execute(::grpc::ClientContext* context, const ::remoteGPU::FileID* request, ::remoteGPU::Output* response, std::function<void(::grpc::Status)>) override;
      void Execute(::grpc::ClientContext* context, const ::remoteGPU::FileID* request, ::remoteGPU::Output* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::remoteGPU::FileID>* AsyncUploadFileRaw(::grpc::ClientContext* context, const ::remoteGPU::File& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::remoteGPU::FileID>* PrepareAsyncUploadFileRaw(::grpc::ClientContext* context, const ::remoteGPU::File& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::remoteGPU::File>* AsyncDownloadFileRaw(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::remoteGPU::File>* PrepareAsyncDownloadFileRaw(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::remoteGPU::Output>* AsyncExecuteRaw(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::remoteGPU::Output>* PrepareAsyncExecuteRaw(::grpc::ClientContext* context, const ::remoteGPU::FileID& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UploadFile_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadFile_;
    const ::grpc::internal::RpcMethod rpcmethod_Execute_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status UploadFile(::grpc::ServerContext* context, const ::remoteGPU::File* request, ::remoteGPU::FileID* response);
    virtual ::grpc::Status DownloadFile(::grpc::ServerContext* context, const ::remoteGPU::FileID* request, ::remoteGPU::File* response);
    virtual ::grpc::Status Execute(::grpc::ServerContext* context, const ::remoteGPU::FileID* request, ::remoteGPU::Output* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadFile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::remoteGPU::File* /*request*/, ::remoteGPU::FileID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadFile(::grpc::ServerContext* context, ::remoteGPU::File* request, ::grpc::ServerAsyncResponseWriter< ::remoteGPU::FileID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DownloadFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* /*context*/, const ::remoteGPU::FileID* /*request*/, ::remoteGPU::File* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadFile(::grpc::ServerContext* context, ::remoteGPU::FileID* request, ::grpc::ServerAsyncResponseWriter< ::remoteGPU::File>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Execute() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::remoteGPU::FileID* /*request*/, ::remoteGPU::Output* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecute(::grpc::ServerContext* context, ::remoteGPU::FileID* request, ::grpc::ServerAsyncResponseWriter< ::remoteGPU::Output>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UploadFile<WithAsyncMethod_DownloadFile<WithAsyncMethod_Execute<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UploadFile() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::remoteGPU::File, ::remoteGPU::FileID>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::remoteGPU::File* request, ::remoteGPU::FileID* response) { return this->UploadFile(context, request, response); }));}
    void SetMessageAllocatorFor_UploadFile(
        ::grpc::MessageAllocator< ::remoteGPU::File, ::remoteGPU::FileID>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::remoteGPU::File, ::remoteGPU::FileID>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::remoteGPU::File* /*request*/, ::remoteGPU::FileID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::remoteGPU::File* /*request*/, ::remoteGPU::FileID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DownloadFile() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::remoteGPU::FileID, ::remoteGPU::File>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::remoteGPU::FileID* request, ::remoteGPU::File* response) { return this->DownloadFile(context, request, response); }));}
    void SetMessageAllocatorFor_DownloadFile(
        ::grpc::MessageAllocator< ::remoteGPU::FileID, ::remoteGPU::File>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::remoteGPU::FileID, ::remoteGPU::File>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* /*context*/, const ::remoteGPU::FileID* /*request*/, ::remoteGPU::File* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DownloadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::remoteGPU::FileID* /*request*/, ::remoteGPU::File* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Execute() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::remoteGPU::FileID, ::remoteGPU::Output>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::remoteGPU::FileID* request, ::remoteGPU::Output* response) { return this->Execute(context, request, response); }));}
    void SetMessageAllocatorFor_Execute(
        ::grpc::MessageAllocator< ::remoteGPU::FileID, ::remoteGPU::Output>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::remoteGPU::FileID, ::remoteGPU::Output>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::remoteGPU::FileID* /*request*/, ::remoteGPU::Output* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Execute(
      ::grpc::CallbackServerContext* /*context*/, const ::remoteGPU::FileID* /*request*/, ::remoteGPU::Output* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_UploadFile<WithCallbackMethod_DownloadFile<WithCallbackMethod_Execute<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadFile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::remoteGPU::File* /*request*/, ::remoteGPU::FileID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DownloadFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* /*context*/, const ::remoteGPU::FileID* /*request*/, ::remoteGPU::File* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Execute() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::remoteGPU::FileID* /*request*/, ::remoteGPU::Output* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadFile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::remoteGPU::File* /*request*/, ::remoteGPU::FileID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DownloadFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* /*context*/, const ::remoteGPU::FileID* /*request*/, ::remoteGPU::File* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Execute() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::remoteGPU::FileID* /*request*/, ::remoteGPU::Output* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecute(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UploadFile() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UploadFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::remoteGPU::File* /*request*/, ::remoteGPU::FileID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DownloadFile() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DownloadFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* /*context*/, const ::remoteGPU::FileID* /*request*/, ::remoteGPU::File* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DownloadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Execute() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Execute(context, request, response); }));
    }
    ~WithRawCallbackMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::remoteGPU::FileID* /*request*/, ::remoteGPU::Output* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Execute(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UploadFile() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::remoteGPU::File, ::remoteGPU::FileID>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::remoteGPU::File, ::remoteGPU::FileID>* streamer) {
                       return this->StreamedUploadFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::remoteGPU::File* /*request*/, ::remoteGPU::FileID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUploadFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::remoteGPU::File,::remoteGPU::FileID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DownloadFile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::remoteGPU::FileID, ::remoteGPU::File>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::remoteGPU::FileID, ::remoteGPU::File>* streamer) {
                       return this->StreamedDownloadFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* /*context*/, const ::remoteGPU::FileID* /*request*/, ::remoteGPU::File* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDownloadFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::remoteGPU::FileID,::remoteGPU::File>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Execute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Execute() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::remoteGPU::FileID, ::remoteGPU::Output>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::remoteGPU::FileID, ::remoteGPU::Output>* streamer) {
                       return this->StreamedExecute(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Execute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Execute(::grpc::ServerContext* /*context*/, const ::remoteGPU::FileID* /*request*/, ::remoteGPU::Output* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::remoteGPU::FileID,::remoteGPU::Output>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UploadFile<WithStreamedUnaryMethod_DownloadFile<WithStreamedUnaryMethod_Execute<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UploadFile<WithStreamedUnaryMethod_DownloadFile<WithStreamedUnaryMethod_Execute<Service > > > StreamedService;
};

}  // namespace remoteGPU


#endif  // GRPC_remote_5fgpu_2eproto__INCLUDED
